@inject IHubServices<Insection> SaleService
<div class="container bg-light rounded bg-opacity-75">
    <h1 class="text-center mb-4">Insections Dashboard</h1>
    <div class="input-group mb-3 search-bar">
        <input @bind="key" @oninput="SearchSale" type="text" class="form-control" id="searchInput" placeholder="Search name or date">
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-hover table-primary">
            <thead class="table-header">
                <tr>
                    <th>Date</th>
                    <th>Name</th>
                    <th>Amount(R)</th>
                    <th>Expenses(R)</th>
                    <th>Expenses Description</th>
                    <th>Sales Total</th>
                    <th>CarryOver</th>
                </tr>
            </thead>
            <tbody id="salesTable">
                <!-- Table rows will be dynamically added here -->
                @if(TempList.Count == 0)
                {
                    <tr>
                        <td class="text-center" colspan="7">
                            No Results
                        </td>
                    </tr>
                    
                }
                else
                {
                    foreach(var sale in TempList)
                    {
                        <tr>
                            <td>@sale.Date.ToShortDateString()</td>
                            <td>@sale.Name</td>
                            <td>@sale.Amount.ToString("C")</td>
                            <td>@sale.ExpensesAmount.ToString("C")</td>
                            <td>@(sale.ExpensesDescription)</td>
                            <td>@sale.SalesTotal.ToString("C")</td>
                            <td>@sale.CarryOver.ToString("C")</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public string CompanyName { get; set; } = string.Empty;
    List<Insection> OriginalList { get; set; } = new ();
    List<Insection> TempList { get; set; } = new();

    string key = string.Empty; 
    protected async override Task OnParametersSetAsync()
    {
        OriginalList = await SaleService.GetAsync(CompanyName);
        TempList = OriginalList;
    }
    private void SearchSale(ChangeEventArgs e)
    {
        key = e.Value!.ToString() ?? string.Empty;
        Regex rx = new(@$"{key.ToLower()}");
        TempList = OriginalList.Where(s => 
                                rx.IsMatch(s.Name.ToLower()) ||
                                rx.IsMatch(s.Date.ToShortDateString()) 
            ).ToList();
    }
}
